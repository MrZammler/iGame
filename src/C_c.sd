##rem $Id$
##stringtype C
##shortstrings
/*
  %b_cat.c
  Translatable strings for iGame

  Copyright (c) 2018, Emmanuel Vasilakis

  This file is part of iGame.

  iGame is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  iGame is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with iGame. If not, see <http://www.gnu.org/licenses/>.
*/

/****************************************************************

   This file was created automatically by `%fv'
   from "%f0".

   Do NOT edit by hand!

****************************************************************/

/****************************************************************
    This file uses the auto initialization features of
    Dice, gcc, SAS/C and VBCC, respectively.

    Dice does this by using the __autoinit and __autoexit
    keywords, whereas SAS/C uses names beginning with _STI
    or _STD, respectively. gcc uses the asm() instruction
    to emulate C++ constructors and destructors. VBCC uses
    names starting with _INIT_n_ and _INIT_n_, respectively,
    where n can be any digit between 1 and 9 inclusive.

    Using this file you don't have *all* the benefits of
    locale.library (no Locale or Language arguments are
    supported when opening the catalog). However, these are
    *very* rarely used, so this should be sufficient for most
    applications.
****************************************************************/

/*
    Include files and compiler specific stuff
*/

#include <exec/memory.h>
#include <libraries/locale.h>
#include <libraries/iffparse.h>

#include <proto/exec.h>
#include <proto/dos.h>
#include <proto/locale.h>

#include <stdlib.h>
#include <string.h>

#include "%b_cat.h"


/*
    Variables
*/

struct FC_String %b_Strings[%n] = {
    { (STRPTR) %s, %d }%(,)
};

STATIC struct Catalog *%bCatalog = NULL;
#ifdef LOCALIZE_V20
STATIC STRPTR %bStrings = NULL;
STATIC ULONG %bStringsSize;
#endif


#if defined(_DCC)
STATIC __autoexit VOID _STDClose%bCatalog(VOID)
#elif defined(__SASC)
VOID _STDClose%bCatalog(VOID)
#elif defined(__GNUC__)
STATIC VOID __attribute__ ((destructor)) _STDClose%bCatalog(VOID)
#elif defined(__VBCC__)
void _EXIT_9_Close%bCatalog(void)
#else
VOID Close%bCatalog(VOID)
#endif

{
    if (%bCatalog) {
        CloseCatalog(%bCatalog);
    }
#ifdef LOCALIZE_V20
    if (%bStrings) {
        FreeMem(%bStrings, %bStringsSize);
    }
#endif
}


#if defined(_DCC)
STATIC __autoinit VOID _STIOpen%bCatalog(VOID)
#elif defined(__SASC)
VOID _STIOpen%bCatalog(VOID)
#elif defined(__GNUC__)
VOID __attribute__ ((constructor)) _STIOpen%bCatalog(VOID)
#elif defined(__VBCC__)
void _INIT_9_Open%bCatalog(void)
#else
VOID Open%bCatalog(VOID)
#endif

{
    if (LocaleBase) {
        if ((%bCatalog = OpenCatalog(NULL, (STRPTR) "%b.catalog",
                                     OC_BuiltInLanguage, %l,
                                     OC_Version, %v,
                                     TAG_DONE))) {
            struct FC_String *fc;
            int i;

            for (i = 0, fc = %b_Strings;  i < %n;  i++, fc++) {
                 fc->msg = GetCatalogStr(%bCatalog, fc->id, (STRPTR) fc->msg);
            }
        }
    }
}




#ifdef LOCALIZE_V20
VOID Init%bCatalog(STRPTR language)

{
    struct IFFHandle *iffHandle;

    /*
    **  Use iffparse.library only, if we need to.
    */
    if (LocaleBase  ||  !IFFParseBase  ||  !language  ||
        Stricmp(language, %l) == 0) {
        return;
    }

    if ((iffHandle = AllocIFF())) {
        char path[128];  /* Enough to hold 4 path items (dos.library V40) */
        strcpy(path, "PROGDIR:Catalogs");
        AddPart((STRPTR) path, language, sizeof(path));
        AddPart((STRPTR) path, "%b.catalog", sizeof(path));
        if (!(iffHandle->iff_Stream = Open((STRPTR) path, MODE_OLDFILE))) {
            strcpy(path, "LOCALE:Catalogs");
            AddPart((STRPTR) path, language, sizeof(path));
            AddPart((STRPTR) path, language, sizeof(path));
            iffHandle->iff_Stream = Open((STRPTR) path, MODE_OLDFILE);
        }

        if (iffHandle->iff_Stream) {
            InitIFFasDOS(iffHandle);
            if (!OpenIFF(iffHandle, IFFF_READ)) {
                if (!PropChunk(iffHandle, MAKE_ID('C','T','L','G'),
                               MAKE_ID('S','T','R','S'))) {
                    struct StoredProperty *sp;
                    int error;

                    for (;;) {
                        if ((error = ParseIFF(iffHandle, IFFPARSE_STEP))
                                   ==  IFFERR_EOC) {
                            continue;
                        }
                        if (error) {
                            break;
                        }

                        if ((sp = FindProp(iffHandle, MAKE_ID('C','T','L','G'),
                                           MAKE_ID('S','T','R','S')))) {
                            /*
                            **  Check catalog and calculate the needed
                            **  number of bytes.
                            **  A catalog string consists of
                            **      ID (LONG)
                            **      Size (LONG)
                            **      Bytes (long word padded)
                            */
                            LONG bytesRemaining;
                            LONG *ptr;

                            %bStringsSize = 0;
                            bytesRemaining = sp->sp_Size;
                            ptr = (LONG *) sp->sp_Data;

                            while (bytesRemaining > 0) {
                                LONG skipSize, stringSize;

                                ptr++;                  /* Skip ID */
                                stringSize = *ptr++;
                                skipSize = ((stringSize+3) >> 2);

                                %bStringsSize += stringSize+1;  /* NUL */
                                bytesRemaining -= 8 + (skipSize << 2);
                                ptr += skipSize;
                            }

                            if (!bytesRemaining  &&
                                (%bStrings = AllocMem(%bStringsSize, MEMF_ANY))) {
                                STRPTR sptr;

                                bytesRemaining = sp->sp_Size;
                                ptr = (LONG *) sp->sp_Data;
                                sptr = %bStrings;

                                while (bytesRemaining) {
                                    LONG skipSize, stringSize, id;
                                    struct FC_String *fc;
                                    int i;

                                    id = *ptr++;
                                    stringSize = *ptr++;
                                    skipSize = ((stringSize+3) >> 2);

                                    CopyMem(ptr, sptr, stringSize);
                                    bytesRemaining -= 8 + (skipSize << 2);
                                    ptr += skipSize;

                                    for (i = 0, fc = %b_Strings;  i < %n;  i++, fc++) {
                                        if (fc->id == id) {
                                            fc->msg = sptr;
                                        }
                                    }

                                    sptr += stringSize;
                                    *sptr++ = '\\0';
                                }
                            }
                            break;
                        }
                    }
                }
                CloseIFF(iffHandle);
            }
            Close(iffHandle->iff_Stream);
        }
        FreeIFF(iffHandle);
    }
}
#endif
